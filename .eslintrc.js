module.exports = {
  root: true,
  parser: '@typescript-eslint/parser',
  plugins: ['@typescript-eslint', 'json', 'react'],
  extends: [
    'eslint:recommended',
    'plugin:@typescript-eslint/eslint-recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:@typescript-eslint/recommended-type-checked',
    'plugin:react/recommended',
    'plugin:react/jsx-runtime',
    'plugin:react-hooks/recommended',
    'plugin:json/recommended',
    'plugin:import/warnings',
    'plugin:storybook/recommended',
    'next/core-web-vitals',
    'prettier',
  ],
  parserOptions: {
    project: ['tsconfig.json'],
    ecmaVersion: 12,
    sourceType: 'module',
    ecmaFeatures: {
      experimentalObjectRestSpread: true,
      jsx: true,
    },
    tsconfigRootDir: __dirname,
  },
  rules: {
    // JS
    indent: ['error', 2, { SwitchCase: 1 }],
    'space-before-function-paren': ['error', 'always'],
    'linebreak-style': ['error', 'unix'],
    curly: ['error', 'all'],
    'no-console': ['error', { allow: ['warn', 'error', 'info'] }],
    quotes: ['error', 'single', { allowTemplateLiterals: true }],
    semi: ['error', 'never'],
    'arrow-parens': ['error', 'as-needed'],
    'require-await': 'error',
    'comma-dangle': ['error', 'always-multiline'],
    'arrow-body-style': ['error', 'as-needed'],
    'no-implicit-coercion': 'error',
    camelcase: ['off'],
    'no-multiple-empty-lines': ['error', { max: 1, maxEOF: 1 }],
    'no-unused-vars': 'error',
    // Import order
    'import/order': [
      'error',
      {
        alphabetize: {
          caseInsensitive: true,
          order: 'asc',
        },
        'newlines-between': 'always',
        distinctGroup: false,
        pathGroupsExcludedImportTypes: ['builtin', 'parent', 'index'],
        groups: [
          'builtin',
          'external',
          'parent',
          'internal',
          'unknown',
          ['index', 'sibling'],
          'type',
          'object',
        ],
        pathGroups: [
          {
            pattern: '{@type/*,*.types}',
            patternOptions: { matchBase: true },
            group: 'type',
            position: 'after',
          },
          {
            pattern: '{@theme/*,*.css,@theme.css}',
            patternOptions: { matchBase: true },
            group: 'object',
            position: 'before',
          },
          {
            pattern: '@containers/**',
            patternOptions: { matchBase: true },
            group: 'internal',
            position: 'before',
          },
          {
            pattern: '@components/**',
            patternOptions: { matchBase: true },
            group: 'internal',
            position: 'before',
          },
          {
            pattern: '@app/**',
            patternOptions: { matchBase: true },
            group: 'unknown',
            position: 'before',
          },
          {
            pattern: '@hooks/**',
            patternOptions: { matchBase: true },
            group: 'unknown',
            position: 'before',
          },
          {
            pattern: '@modules/**',
            patternOptions: { matchBase: true },
            group: 'unknown',
            position: 'before',
          },
          {
            pattern: '@services/**',
            patternOptions: { matchBase: true },
            group: 'unknown',
            position: 'before',
          },
          {
            pattern: '@hocs/**',
            patternOptions: { matchBase: true },
            group: 'unknown',
            position: 'before',
          },
          {
            pattern: '@utils/**',
            patternOptions: { matchBase: true },
            group: 'unknown',
            position: 'before',
          },
          {
            pattern: '@{dev,static,assets}/**',
            patternOptions: { matchBase: true },
            group: 'unknown',
            position: 'before',
          },
        ],
      },
    ],
    // React and JSX
    'react/jsx-uses-react': 'off',
    'react/react-in-jsx-scope': 'off',
    'react/jsx-no-duplicate-props': 'error',
    'react/jsx-no-undef': 'error',
    'react/jsx-pascal-case': 'error',
    'react/jsx-uses-vars': 'error',
    'react/prop-types': 'off',
    'react/self-closing-comp': 'error',
    'jsx-quotes': ['error', 'prefer-double'],
    // Typescript
    '@typescript-eslint/no-explicit-any': 'error',
    '@typescript-eslint/consistent-type-imports': 'error',
    '@typescript-eslint/consistent-type-exports': 'error',
    '@typescript-eslint/no-empty-interface': 'off',
    '@typescript-eslint/no-use-before-define': 'off',
    '@typescript-eslint/no-unused-vars': 'off',
    '@typescript-eslint/no-var-requires': 'off',
    '@typescript-eslint/no-empty-function': 'off',
    '@typescript-eslint/ban-ts-comment': 'off',
    '@typescript-eslint/naming-convention': [
      'error',
      {
        selector: 'interface',
        format: ['PascalCase'],
        custom: {
          regex: '^I[A-Z]',
          match: true,
        },
      },
    ],
  },
  ignorePatterns: ['dev/generator/templates/'],
}
